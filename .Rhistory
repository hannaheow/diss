# Summarize the data for each year, calculating median, min, and max for migration rate and mortality rate
summarize_data <- function(data) {
data %>%
group_by(year) %>%
summarize(
migrat_median = median(migrat, na.rm = TRUE),
migrat_min = min(migrat, na.rm = TRUE),
migrat_max = max(migrat, na.rm = TRUE),
rate_d1_median = median(rate_d1, na.rm = TRUE),
rate_d1_min = min(rate_d1, na.rm = TRUE),
rate_d1_max = max(rate_d1, na.rm = TRUE)
)
}
# Create summarized tables for rural and urban data
rural_summary <- summarize_data(rural_data)
urban_summary <- summarize_data(urban_data)
# Reshape the table for the desired format
format_table <- function(summary_data, title) {
summary_data %>%
select(year, starts_with("migrat"), starts_with("rate_d1")) %>%
knitr::kable(
format = "latex",
col.names = c("Year", "Median", "Min", "Max", "Median", "Min", "Max"),
caption = paste(
title,
"Migration rate and premature age-adjusted mortality rate for each year. Note: migration rates for 2011 are not included because the migration-flow data starts from 2011 to 2012, and these values are shown in the 2012 section."
)
) %>%
kable_styling(font_size = 8, latex_options = "scale_down") %>%
add_header_above(c(" " = 1, "Migration Rate" = 3, "Premature Age-Adjusted Mortality Rate" = 3))
}
# Format and display tables for rural and urban data
format_table(rural_summary, "Rural Counties")
format_table(urban_summary, "Urban Counties")
rural_summary
# Load necessary packages
library(tidyverse)
library(kableExtra)
# Load data
load("data_processed_aim2/migterm_imp.Rdata")
# Calculate migration rate
migterm_imp$migrat <- as.numeric(migterm_imp$totin_d) / as.numeric(migterm_imp$pop_d0) * 1000
# Label factors
migterm_imp <- migterm_imp %>%
mutate(rural = factor(rural, levels = c(0, 1), labels = c("Urban", "Rural")))
# Filter data for rural and urban separately
rural_data <- migterm_imp %>% filter(rural == "Rural")
urban_data <- migterm_imp %>% filter(rural == "Urban")
# Summarize the data for each year, calculating median, min, and max and formatting as "median [min, max]"
summarize_data <- function(data) {
data %>%
group_by(year) %>%
summarize(
migrat_summary = sprintf("%.2f [%.2f, %.2f]", median(migrat, na.rm = TRUE), min(migrat, na.rm = TRUE), max(migrat, na.rm = TRUE)),
rate_d1_summary = sprintf("%.2f [%.2f, %.2f]", median(rate_d1, na.rm = TRUE), min(rate_d1, na.rm = TRUE), max(rate_d1, na.rm = TRUE))
)
}
# Create summarized tables for rural and urban data
rural_summary <- summarize_data(rural_data)
urban_summary <- summarize_data(urban_data)
# Format the table for the desired layout
format_table <- function(summary_data, title) {
summary_data %>%
knitr::kable(
format = "latex",
col.names = c("Year", "Migration Rate (per 1,000)", "Premature Age-Adjusted Mortality Rate (per 100,000)"),
caption = paste(
title,
"Migration rate and premature age-adjusted mortality rate for each year. Note: migration rates for 2011 are not included because the migration-flow data starts from 2011 to 2012, and these values are shown in the 2012 section."
)
) %>%
kable_styling(font_size = 8, latex_options = "scale_down")
}
# Format and display tables for rural and urban data
format_table(rural_summary, "Rural Counties")
format_table(urban_summary, "Urban Counties")
rural_summary
# Load necessary packages
library(tidyverse)
library(kableExtra)
# Load data
load("data_processed_aim2/migterm_imp.Rdata")
# Calculate migration rate
migterm_imp$migrat <- as.numeric(migterm_imp$totin_d) / as.numeric(migterm_imp$pop_d0) * 1000
# Label factors
migterm_imp <- migterm_imp %>%
mutate(rural = factor(rural, levels = c(0, 1), labels = c("Urban", "Rural")))
# Filter data for rural and urban separately
rural_data <- migterm_imp %>% filter(rural == "Rural")
urban_data <- migterm_imp %>% filter(rural == "Urban")
# Summarize the data for each year, calculating median, min, and max and formatting as "median [min, max]"
# Handle NA values to display as "NA" instead of "NA[-Inf, Inf]"
summarize_data <- function(data) {
data %>%
group_by(year) %>%
summarize(
migrat_summary = ifelse(
all(is.na(migrat)), "NA",
sprintf("%.2f [%.2f, %.2f]", median(migrat, na.rm = TRUE), min(migrat, na.rm = TRUE), max(migrat, na.rm = TRUE))
),
rate_d1_summary = ifelse(
all(is.na(rate_d1)), "NA",
sprintf("%.2f [%.2f, %.2f]", median(rate_d1, na.rm = TRUE), min(rate_d1, na.rm = TRUE), max(rate_d1, na.rm = TRUE))
)
)
}
# Create summarized tables for rural and urban data
rural_summary <- summarize_data(rural_data)
urban_summary <- summarize_data(urban_data)
# Format the table for the desired layout with additional header row
format_table <- function(summary_data, title) {
summary_data %>%
knitr::kable(
format = "latex",
col.names = c("Year", "Migration Rate", "Premature Age-Adjusted Mortality Rate"),
caption = paste(
title,
"Migration rate and premature age-adjusted mortality rate for each year. Note: migration rates for 2011 are not included because the migration-flow data starts from 2011 to 2012, and these values are shown in the 2012 section."
)
) %>%
kable_styling(font_size = 8, latex_options = "scale_down") %>%
add_header_above(c(" " = 1, "Migration Rate\nMedian [Min, Max]" = 1, "Premature Age-Adjusted Mortality Rate\nMedian [Min, Max]" = 1))
}
# Format and display tables for rural and urban data
format_table(rural_summary, "Rural Counties")
format_table(urban_summary, "Urban Counties")
10*26
260/60
10*27
270/60
27*11
297/60
??kable_styling
# Load required libraries
library(dplyr)
library(stringr)
# Read in the data
spatonly <- read.delim("data_processed_aim2/modselection_nat.txt", sep = ",")
# Calculate the reference BIC score
ref <- spatonly$BIC[spatonly$Model == "fnom"]
# Calculate BIC score relative to reference
spatonly <- spatonly %>%
mutate(
refbic = round(BIC - ref, 2),
`Migration Included` = !grepl("_nomig|nom", Model),
`Urbanicity interaction` = grepl("r", Model),
`Degrees of Freedom` = str_extract_all(Model, "\\d+")
)
# Convert Degrees of Freedom list to a single string or set to "1" if no number is found
spatonly$`Degrees of Freedom` <- sapply(spatonly$`Degrees of Freedom`, function(x) {
if (length(x) == 0) {
return("1")
} else {
return(paste(x, collapse = " "))
}
})
# Select relevant columns and replace 0 in BIC score with "REF"
tf <- spatonly %>%
select(`Degrees of Freedom`, `Migration Included`, `Urbanicity interaction`, refbic) %>%
rename(`BIC score relative to reference` = refbic) %>%
mutate(`BIC score relative to reference` = ifelse(`BIC score relative to reference` == 0, "REF", `BIC score relative to reference`)) %>%
arrange(`Degrees of Freedom`, `Migration Included`, `Urbanicity interaction`)
# Display the table
tf
tf
# this section needs to be updated w the latest min seed of the 100 iteration decomp
# function to perform NN decomp and calculate the fit
library(nnTensor)
# Perform Non-Negative Tensor Factorization (NTF) and calculate the fit
load("data_processed_aim3/error_zeros.RData") #this is to get the min seed
#load("data_processed_aim3/all_migtypes_tensor_logo.RData") # this is the tensor all_migtypes
minseed = error_zeros %>% filter(ncomp == 3) %>%
filter(error == min(error)) %>%
select(seed)
minseed = as.numeric(minseed)
set.seed(seed = minseed)
#ntf_decomp <- nnTensor::NTF(all_migtypes, rank = 3, verbose = TRUE)  # Perform NTF with the specified number of components
#save(ntf_decomp, file = "data_processed_aim3/decomp3_100_log_defaults.RData")
# proceeding with this data and lots of waxing/waning about subjectivity:
load("data_processed_aim3/decomp3_100_log_defaults.RData")
# will include pop adj decomp as an aside - look the results change completely if we pop adj
Orig3 <- ntf_decomp$A[[1]]  # Factor matrix for origin
Dest3 <- ntf_decomp$A[[2]]  # Factor matrix for destination
Time3 <- ntf_decomp$A[[3]]  # Factor matrix for year
# Load necessary libraries
library(ggplot2)
library(sf)
library(tigris)
library(dplyr)
library(patchwork)
# Load US counties shapefile
counties <- sf::st_read("https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json", quiet = TRUE)
#counties = tigris::counties(cb = TRUE) - this is 2022 which is not what we wnat!
# get the origid_unique, destid_unique needed below
fips_codes <- as.character(counties$id)
# Remove FIPS codes for Puerto Rico (72...), Hawaii (15...), and Alaska (02...)
fips_codes <- fips_codes[!grepl("^72|^15|^02", fips_codes)]
origid_unique = unique(fips_codes)
destid_unique = unique(fips_codes)
# Function to create side-by-side maps for each component
create_side_by_side_map <- function(component_num) {
# Dataframes for origin and destination loadings
df_orig <- data.frame(county_id = origid_unique, loadings = Orig3[component_num,])
df_dest <- data.frame(county_id = destid_unique, loadings = Dest3[component_num,])
# Normalize loadings between 0 and 1 for origin and destination
df_orig$normalized_loading <- df_orig$loadings / max(df_orig$loadings, na.rm = TRUE)
df_dest$normalized_loading <- df_dest$loadings / max(df_dest$loadings, na.rm = TRUE)
# Merge with counties spatial data for origin
map_data_orig <- merge(counties, df_orig, by.x = "id", by.y = "county_id")
map_data_orig$rank_loading <- rank(map_data_orig$loadings, na.last = "keep",
ties.method = "min")  # Rank the loadings
# Merge with counties spatial data for destination
map_data_dest <- merge(counties, df_dest, by.x = "id", by.y = "county_id")
map_data_dest$rank_loading <- rank(map_data_dest$loadings, na.last = "keep", ties.method = "min")  # Rank the loadings
# Create ggplot for origin loadings
p_orig <- ggplot(map_data_orig) +
geom_sf(aes(fill = rank_loading)) +
#  scale_fill_viridis_c(option = "plasma", name = paste("Orig Rank - Comp", component_num)) +
theme_void() +
ggtitle("Origin") +
theme(legend.position = "none")
# Create ggplot for destination loadings
p_dest <- ggplot(map_data_dest) +
geom_sf(aes(fill = rank_loading)) +
# scale_fill_viridis_c(option = "plasma", name = paste("Dest Rank - Comp", component_num)) +
theme_void() +
ggtitle("Destination") +
theme(legend.position = "bottom", legend.title = element_blank())
# Combine the two maps with a shared title and single legend
combined_plot <- cowplot::plot_grid(
p_orig, p_dest, ncol = 1, align = "v", rel_heights = c(1,1)
)
# Add a shared title above both maps
#  final_plot <- cowplot::plot_grid(
#    cowplot::ggdraw() +
#    cowplot::draw_label(paste("Component", component_num), fontface = 'bold', y =1, x = 0) +
#    combined_plot,
#    legend,
#    ncol = 1)
#rel_heights = c(1, 1, 0.1))
# Return the final plot with the legend from the origin map
# return(final_plot + scale_fill_viridis_c(option = "plasma", name = "Rank"))
return(combined_plot)
}
# Create side-by-side maps for each component [1], [2], [3]
p1 <- create_side_by_side_map(1)
p2 <- create_side_by_side_map(2)
p3 <- create_side_by_side_map(3)
p1
save(p1, file = "aim2_images/comp1_maps.png")
save(p1, file = "aim2_images/comp1_maps.png")
save(p2, file = "aim2_images/comp2_maps.png")
save(p3, file = "aim2_images/comp3_maps.png")
ggsave("aim2_images/comp1_maps.png", plot = p1, dpi = 300)
ggsave("aim2_images/comp2_maps.png", plot = p2, dpi = 300)
ggsave("aim2_images/comp3_maps.png", plot = p3, dpi = 300)
# Create side-by-side maps for each component [1], [2], [3]
p1 <- create_side_by_side_map(1)
p1
ggsave("aim2_images/comp1_maps.png", plot = p1, dpi = 300)
ggsave("aim2_images/comp2_maps.png", plot = p2, dpi = 300)
ggsave("aim2_images/comp3_maps.png", plot = p3, dpi = 300)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), each = 3),  # Repeat each year for 3 components
component = rep(1:3, times = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
# Plot with separate lines for each component
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line() +
geom_point() +
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
)
print(p)
p
Time3[1,]
rep(1:3, times = length(years))
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), each = 3),  # Repeat each year for 3 components
component = c(rep(1, times = length(years)), rep(2, times = length(years)), rep(3, times = length(years))),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
# Plot with separate lines for each component
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line() +
geom_point() +
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
)
print(p)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), length = 3),  # Repeat each year for 3 components
component = rep(1,2,3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
df_time_all
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1,2,3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
df_time_all
rep(1,2,3, each = length(years))
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
df_time_all
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
# Plot with separate lines for each component
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line() +
geom_point() +
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
)
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line(alpha = 0.7) +     # Make lines slightly transparent
geom_point(alpha = 0.7) +    # Make points slightly transparent
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
) +
scale_color_manual(values = c("lightblue", "orange", "darkgreen"))  # Custom colors for clarity
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line(size = 1.5, alpha = 0.7) +    # Thicker, slightly transparent lines
geom_point(size = 2, alpha = 0.7) +     # Slightly larger, transparent points
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
) +
scale_color_manual(values = c("blue", "orange", "green"))  # Custom colors for clarity
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component))) +
geom_line(size = 1.5, alpha = 0.4) +    # Thicker, slightly transparent lines
geom_point(size = 2, alpha = 0.4) +     # Slightly larger, transparent points
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component"
) +
scale_color_manual(values = c("blue", "orange", "green"))  # Custom colors for clarity
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component), linetype = factor(component))) +
geom_line(size = 1.5) +    # Thicker lines with different line types
geom_point(size = 2) +     # Larger points without transparency
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component",
linetype = "Component"
) +
scale_color_manual(values = c("blue", "orange", "green")) +  # Custom colors for clarity
scale_linetype_manual(values = c("solid", "dashed", "dotted"))  # Different line types for each component
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component), linetype = factor(component))) +
geom_line(size = 1.5, alpha = 0.5) +    # Thicker lines with different line types
geom_point(size = 2) +     # Larger points without transparency
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component",
linetype = "Component"
) +
scale_color_manual(values = c("blue", "orange", "green")) +  # Custom colors for clarity
scale_linetype_manual(values = c("solid", "dashed", "dotted"))  # Different line types for each component
print(p)
load("data_processed_aim3/tsub.RData")
years = unique(tsub$year)
# Combine all components' loadings into a single data frame
df_time_all <- data.frame(
year = rep(as.numeric(years), times = 3),  # Repeat each year for 3 components
component = rep(1:3, each = length(years)),  # Component numbers
loadings = c(Time3[1, ], Time3[2, ], Time3[3, ])  # Loadings for each component
)
# Rank the loadings within each component
df_time_all <- df_time_all %>%
group_by(component) %>%
mutate(ranked_loadings = rank(loadings))
p <- ggplot(df_time_all, aes(x = year, y = ranked_loadings, color = factor(component), linetype = factor(component))) +
geom_line(size = 1.5, alpha = 0.5) +    # Thicker lines with different line types
geom_point(size = 2) +     # Larger points without transparency
theme_minimal() +
labs(
x = "Year",
y = "Relative Importance",
color = "Component",
linetype = "Component"
) +
scale_color_manual(values = c("lightblue", "orange", "darkgreen")) +  # Custom colors for clarity
scale_linetype_manual(values = c("solid", "dashed", "dotted"))  # Different line types for each component
print(p)
??sweep
load("C:/Users/hanna/Documents/diss/data_processed_aim3/tsub.Rdata")
load("C:/Users/hanna/Documents/diss/data_processed_aim3/all_migtypes_tensor_logo.RData")
dim(all_mig)
dim(all_migtypes)
length(all_migtypes[all_migtypes == 0])
length(all_migtypes[all_migtypes == 0,])
sum(all_migtypes@data == 0)
dim(all_migtypes@data)
3109*3109*8
77305098 -77327048
21950/77327048
